#include<windows.h>
#include<stdio.h>
#include<iostream>
#include<math.h>
#include<GL/glut.h>
#include<string.h>
#define c (3.141/180)
GLfloat x1=0.0,x2=-341.0,x3=-683.0,x4=-1024.0,col[4][12][3];

float pos,y=0,h[4][12],cnt=0.0,ropeactive=0.0,rp=0.0;
int counter=0,i1=0,i2=0,i3=0,i4=0;
int flag[4][12]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0},points=0,tf=0;
int mins=1, sec=0;
float secf = 0.0;
int chai=0, chai1=0;


void ship(int x,int y)
{
        int m=545, n=700, r=40, i;
		glBegin(GL_POLYGON);
		glColor3f(0.30,0.06,0.42);
		glVertex2f(20,530+7*sin((counter%360)*c));
		glColor3f(0.30,0.06,0.42);
		glVertex2f(20,512+7*sin((counter%360)*c));
        glColor3f(.0,0.0,0.0);
		glVertex2f(82,432+7*sin((counter%360)*c));
        glColor3f(0.0,0.0,0.0);
        glVertex2f(438,432+7*sin((counter%360)*c));
        glColor3f(0.32,0.06,0.42);
        glVertex2f(584,512+7*sin((counter%360)*c));
        glColor3f(0.30,0.06,0.42);
		glVertex2f(600,530+7*sin((counter%360)*c));
		glEnd();

		glBegin(GL_POLYGON);
		glColor3f(0.0,0.0,0.0);
		glVertex2f(60,530+7*sin((counter%360)*c));
		glVertex2f(70,530+7*sin((counter%360)*c));
		glVertex2f(70,730+7*sin((counter%360)*c));
		glVertex2f(60,730+7*sin((counter%360)*c));
        glEnd();

        glBegin(GL_POLYGON);          /*MANNNNNNNNNNNNN*/
		glColor3f(1.0,0.0,0.0);
		glVertex2f(540,540+7*sin((counter%360)*c));
		glVertex2f(550,540+7*sin((counter%360)*c));
		glVertex2f(550,670+7*sin((counter%360)*c));
		glVertex2f(540,670+7*sin((counter%360)*c));
        glEnd();

          glBegin(GL_POLYGON);          /*HANDS*/
		glColor3f(1.0,0.0,0.0);
		glVertex2f(550,590+7*sin((counter%360)*c));
		glVertex2f(550,600+7*sin((counter%360)*c));
		glVertex2f(580,640+7*sin((counter%360)*c));
		glVertex2f(580,630+7*sin((counter%360)*c));
        glEnd();


         glBegin(GL_POLYGON);          /*LEGS*/
		glColor3f(0.0,1.0,0.0);
		glVertex2f(540,530+7*sin((counter%360)*c));
		glVertex2f(540,540+7*sin((counter%360)*c));
		glVertex2f(580,540+7*sin((counter%360)*c));
		glVertex2f(580,530+7*sin((counter%360)*c));
        glEnd();

        glBegin(GL_POLYGON);                      /*HEAD*/
        glColor3f(0.0,0.0,1.0);
        for(i=0;i<360;i++)
        glVertex2f(m+r*cos(i*c), n+r*sin(i*c)+7*sin((counter%360)*c));
        glEnd();

         glBegin(GL_POLYGON);
		glColor3f(0.0,0.0,0.0);
		glVertex2f(550,700+7*sin((counter%360)*c));                    /*...............................EYES*/
		glVertex2f(553,700+7*sin((counter%360)*c));
		glVertex2f(553,705+7*sin((counter%360)*c));
		glVertex2f(550,705+7*sin((counter%360)*c));
		glEnd();
		 glBegin(GL_POLYGON);
		glColor3f(0.0,0.0,0.0);
		glVertex2f(570,700+7*sin((counter%360)*c));
		glVertex2f(573,700+7*sin((counter%360)*c));
		glVertex2f(573,705+7*sin((counter%360)*c));
		glVertex2f(570,705+7*sin((counter%360)*c));
		glEnd();

		glBegin(GL_LINES);                         /*MOUTH*/
		glColor3f(0.0,0.0,0.0);
		glVertex2d(550,680+7*sin((counter%360)*c));
		glVertex2d(565,680+7*sin((counter%360)*c));
		glEnd();

        glBegin(GL_POLYGON);          /*FISHING POLE*/
		glColor3f(0.0,0.0,0.0);
		glVertex2f(580,640+7*sin((counter%360)*c));
		glVertex2f(580,630+7*sin((counter%360)*c));
		glVertex2f(620,660+7*sin((counter%360)*c));
		glVertex2f(620,670+7*sin((counter%360)*c));
        glEnd();
        glBegin(GL_POLYGON);
		glColor3f(0.0,0.0,0.0);
		glVertex2f(620,660+7*sin((counter%360)*c));
		glVertex2f(620,670+7*sin((counter%360)*c));
		glVertex2f(750,750+7*sin((counter%360)*c));
		glEnd();

}
void water1()
{
    glBegin(GL_POLYGON);
    glColor3f(0.0,0.0,1.0);
    glVertex2f(0,0);
    glVertex2f(0,450);
    for(int i = 0; i <=1024 ; i++)
        glVertex2f(i,450+5*sin(((5*(i-counter/2)%360)*c)));
    glVertex2f(1024,450);
    glVertex2f(1024,0);
    glEnd();
}

void prints(GLfloat x, GLfloat y, GLfloat scale, char *g)
{
	int i;
    GLfloat z=0.0;
	glPushMatrix();
	glTranslatef(x, y,z);
	glScalef(scale, scale,scale);
	for (i = 0; i <(int)strlen(g); i++)
		glutStrokeCharacter(GLUT_STROKE_ROMAN, g[i]);
	glPopMatrix();
}

void printi(GLfloat x, GLfloat y,int val)//use to convert numbers into characters before printing onto the screen
{
	char a = val + 48;
	int score1=val,scorerev=0;
	glRasterPos2f( x, y);
    while(score1 > 0)
    {
        scorerev*=10;
        scorerev=scorerev+(score1%10);
        score1/=10;
    }
    score1=scorerev;
	while(score1 > 0)
    {
        a=(score1%10)+48;
        score1/=10;
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, a);
    }
    if(val%10==0)
    {a=val%10+48;
    glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, a);}
}

void fish(int d,int y1,GLfloat clr[3],int f1,int f2)
{
     GLfloat xs=0.0;
    GLfloat ys = 20.0+y1+14*sin((counter%360)*c) ;
    if((GLfloat)(20.0+d)>= (GLfloat)750.0 && (GLfloat)(d-30.0) <= (GLfloat)750.0 )
    {
        if((GLfloat)ys < (GLfloat)650+rp && (GLfloat)ys > (GLfloat)610+rp)
                {
                    flag[f1][f2]=1;
                    points+=10;
                }
    }
    glColor3fv(clr);
    glBegin(GL_POLYGON);
    glVertex2f(20+d+xs,15+y1+14*sin((counter%360)*c));
    glVertex2f(25+d+xs,10+y1+14*sin((counter%360)*c));
    glVertex2f(30+d+xs,20+y1+14*sin((counter%360)*c));
    glVertex2f(25+d+xs,35+y1+14*sin((counter%360)*c));

    glVertex2f(20+d+xs,30+y1+14*sin((counter%360)*c));
    glVertex2f(15+d+xs,28+y1+14*sin((counter%360)*c));
    glVertex2f(10+d+xs,35+y1+14*sin((counter%360)*c));
    glVertex2f(10+d+xs,10+y1+14*sin((counter%360)*c));
    glVertex2f(15+d+xs,17+y1+14*sin((counter%360)*c));
    glEnd();

    glColor3f(0,0,0);
    glBegin(GL_LINE_STRIP);
    glVertex2f(26+d+xs,15+y1+14*sin((counter%360)*c));
    glVertex2f(28+d+xs,20+y1+14*sin((counter%360)*c));
    glVertex2f(26+d+xs,30+y1+14*sin((counter%360)*c));
    glEnd();
}

void rope()
{
    glBegin(GL_LINES);         /*FISHING STRING */
        glVertex2d(750,750+7*sin((counter%360)*c));//change value to top if rod point
        if( rp + 500 > 500)
            rp=0;//change x value to same as top and y to top of water
if(rp+600<0)
        rp=-600;
        glVertex2d(750,650+rp);//change value to same as above +rp
        glEnd();

		glBegin(GL_LINE_STRIP);
		glColor3f(0.0,0.0,0.0);
		glVertex2f(750,650+rp);
		glVertex2f(755,640+rp);
		glVertex2f(760,630+rp);
		glVertex2f(755,620+rp);
		glVertex2f(750,610+rp);
		glEnd();

}

void init()
{
	glClearColor(1.0,1.0,1.0,1.0);
	glColor3f(1.0,0.0,0.0);
	glPointSize(1.0);
	glMatrixMode(GL_PROJECTION);
	glLoadIdentity();
	gluOrtho2D(0,1024,0,768);

}

void display()
{
    int a;
	//gluOrtho2D(0,1024,0,768);
	glClear(GL_COLOR_BUFFER_BIT);
	glClearColor(1.0,1.0,1.0,1.0);
	ship(pos,y);
	water1();
	if(chai==0)
    {

	prints(250,720,0.3,"START GAME");
	prints(350,660,0.3,"1.Play ");
	prints(350,620,0.3,"2.Help");
	prints(350,580,0.3,"3.Exit");
    }
	if(chai1==1)
    {
        glColor3f(1.0,1.0,1.0);

        glColor3b(0,0,0);
	prints(900,740,0.1,"Score");
	printi(970,740,points);
	prints(900,720,0.1,"Minutes");
	printi(970,720,mins);
	prints(900,700,0.1,"Seconds");
	printi(970,700,sec);
    }
    if (chai==2)
    {
        glColor3f(1.0,1.0,1.0);

	glColor3f(1.0,0.0,0.0);
        prints(100,720,0.15,"1.Press down arrow key to go down ");
        prints(100,700,0.15,"2.Press up arrow key to go up");
        prints(100,680,0.15,"3.Catch as many fishes as possible!");
        prints(100,660,0.15,"4.Press Space to go back");

    }


	if(tf == 1)
	{
        for(a=300;a<=310;a++)
        {
            glColor3b(0,0,0);
            prints(a,300,0.5,"Game Over");
        }
	}
    for(i1 = 0; i1 <= 12 ; i1+=2)
	{	    if(flag[0][i1] == 0)
            fish(x1+i1*120,32*h[0][i1],col[0][i1],0,i1);
	}
	for(i2 = 0; i2 <= 12 ; i2+=2)
	{	    if(flag[1][i2] == 0)
            fish(x2+i2*120,32*h[1][i2],col[1][i2],1,i2);
	}
    for(i3 = 0; i3 <= 12 ; i3+=2)
	{	    if(flag[2][i3] == 0)
            fish(x3+i3*120,32*h[2][i3],col[2][i3],2,i3);
	}
    for(i4 = 0; i4 <= 12 ; i4+=2)
	{	    if(flag[3][i4] == 0)
            fish(x4+i4*120,32*h[2][i4],col[3][i4],3,i4);
	}
	rope();
    glFlush();
    glutPostRedisplay();
    glutSwapBuffers();
}

void MS(int btn, int state, int x, int y)
{
    if(btn==GLUT_LEFT_BUTTON&&state==GLUT_DOWN)
        if(ropeactive ==0)
            ropeactive=-5;
        else
            ropeactive*=-1;
}

void KB(unsigned char btn, int x ,int y)
{
    if(btn == 51)
        _exit(0);
        if (btn == 49)
        chai=1;
         if (btn == 50)
        chai=2;
        if(btn==32)
            chai=0;


}

void KB1(int btn, int x ,int y)
{
    int chai=0;
    if(btn == GLUT_KEY_DOWN)
        ropeactive = -.5;
    if(btn == GLUT_KEY_UP)
        ropeactive = .5;



}

void idle()
{
    if(x1 == 0)
        for(int k = 0; k <12 ; k++)
        {
            h[0][k]=rand()%12;
            h[1][k]=rand()%12;
            h[2][k]=rand()%12;
            h[3][k]=rand()%12;
            for(int k1 = 0; k1 <12 ; k1++)
            {
                col[0][k][k1]=(rand()%10)/10.0;
                col[1][k][k1]=(rand()%10)/10.0;
                col[2][k][k1]=(rand()%10)/10.0;
                col[3][k][k1]=(rand()%10)/10.0;
            }
        }
    x1+=.1;
    x2+=.1;
    x3+=.1;
    x4+=.1;
    cnt+=.5;
    counter = cnt;
    rp+=ropeactive;
    chai1=chai;

    if(x1>1024+12*20)
    {
        i1=0;
        for(int u =0; u < 12; u++)
            flag[0][u]=0;
        x1=-341;
        counter=0;
    }
    if(x2>1024+12*20)
    {
        i2=0;
        for(int u =0; u < 12; u++)
            flag[1][u]=0;
        x2=-341;
    }
    if(x3>1024+12*20)
    {
        i3=0;
        for(int u =0; u < 12; u++)
            flag[2][u]=0;
        x3=-341;
    }
    if(x4>1024+12*20)
    {
        i4=0;
        for(int u =0; u < 12; u++)
            flag[3][u]=0;
        x4=-341;
    }
}

void timer(int time)
{
    if(chai1==1)
    {

    if(mins == 0 && sec == 0)
    {
        tf=1;
        glutMouseFunc(NULL);
        glutSpecialFunc(NULL);
    }
    else if(sec == 0)
    {
        mins--;
        sec=59;
    }
    else
        sec--;

}
glutTimerFunc(1000,timer,0);
}
 main(int argc,char ** argv)
{
    int chai=0;
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
	glutInitWindowSize(1024,768);
	glutInitWindowPosition(0,0);
    glutCreateWindow("Moving Ship");
	glutFullScreen();
	glutSwapBuffers();
	glutSpecialFunc(KB1);
	glutKeyboardFunc(KB);
	glutMouseFunc(MS);
	glutTimerFunc(1000,timer,0);
	glutIdleFunc(idle);
	glutDisplayFunc(display);
	glEnable(GL_SMOOTH);
	init();
	glutMainLoop();
printf("\npoints:%d\n",points);
}

